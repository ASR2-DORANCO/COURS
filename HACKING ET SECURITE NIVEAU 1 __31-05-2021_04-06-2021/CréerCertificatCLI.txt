# https://www.remipoignon.fr/generez-un-certificat-ssl-auto-signe-pour-passer-en-https/ 

# Pourquoi installer le https ?

# Le HTTPS est un protocole qui permet d‚Äôencrypter les √©changes entre ton serveur et le navigateur web. Ainsi, il est impossible √† un pirate de # r√©cup√©rer les identifiants que tu saisis pour te loguer sur ton site. En HTTP, les identifiants passent en clair et sont facile √† intercepter.

# Il n√©cessite de cr√©er un certificat SSL qui permettra d‚Äôinitialiser les √©changes crypt√©s. 
# C‚Äôest payant ?

# Pour √™tre reconnu par un navigateur web, le certificat SSL doit √™tre sign√© par un organisme de certification. Ces organisme font payer cette # #certification. Depuis quelques ann√©es, Let‚Äôs encrypt permet de g√©n√©rer des certificats SSL gratuitement ! C‚Äôest une excellente nouvelle pour #l‚Äô√©volution globale de la s√©curit√© sur internet.

# Tu peux aussi signer toi m√™me ton certificat SSL, il ne sera alors pas connu par les navigateurs et tu aura une page d‚Äôerreur du genre :
# Votre connexion n'est pas priv√©e
# Page d‚Äôalerte avec un certificat auto-sign√©

# Dans le cas d‚Äôun site en local, ce n‚Äôest pas grave, il te suffit de passer cette alerte et tu peux consulter ton site en toute s√©curit√© car la #couche SSL qui crypte les donn√©es fait quand m√™me son travail.

# Par contre, si un hacker venait √† prendre le contr√¥le de ton serveur et modifiait ton certificat SSL, il serai alors en mesure de d√©crypter les # √©changes. Mais bon ‚Ä¶ Je pense qu‚Äôune fois le hacker sur ton serveur, il peut ais√©ment avoir acc√®s √† tes donn√©es.

# Le cas d‚Äôun certificat auto-sign√© peut √™tre int√©ressant pour la gestion d‚Äôun intranet. L‚Äôid√©e serait de g√©n√©rer un certificat ma√Ætre auto-sign√© # qui signerait ensuite lui m√™me tous les certificats SSL de l‚Äôensemble des services utilis√© dans l‚Äôintranet. C‚Äôest ce qu‚Äôon appelle une PKI # #public Key Infrastructure).

# On peut ensuite installer le certificat ma√Ætre sur tout les postes des utilisateurs de l‚Äôintranet. Ces dernier pourront alors consulter tous # # les sites en HTTPS sans avoir d‚Äôalerte de s√©curit√© et l‚Äôadministrateur de l‚Äôintranet garde la main pour pouvoir ajouter de nouveaux certificats # valides.

# La gestion des PKI fera l‚Äôobjet d‚Äôun article que je sortirai bient√¥t üôÇ

# Dans cet article on va s‚Äôint√©resser √† la cr√©ation d‚Äôun certificat simple auto-sign√©.
# Cr√©er le certificat
# Pr√©requis

# Nous allons travailler avec un site h√©berg√© sur un serveur Linux (avec acc√®s root). Nous utiliserons Apache2 pour le serveur web.

# Openssl doit √™tre install√© pour g√©n√©rer les certificats.

sudo apt-get install openssl

# G√©n√©ration de la cl√© priv√©e

# On va cr√©er une cl√© priv√©e de 4096 bit encrypt√© avec l‚Äôalgorithme de cryptage AES 256 bit.

openssl genrsa -aes256 -out certificat.key 4096

# Entres un mot de passe pour ta cl√© (penses √† bien le conserver).

# On a g√©n√©r√© une cl√© priv√©e prot√©g√©e par mot de passe, on va maintenant g√©n√©rer cette m√™me cl√© mais d√©verrouill√©e.

# Si tu ne souhaites pas la d√©verrouiller, le mot de passe de la cl√© sera demand√© √† chaque red√©marrage de Apache2.

# Dans un premier temps on va renommer notre cl√© :

mv certificat.key certificat.key.lock

# Puis g√©n√©rer notre certificat d√©verrouill√© :

openssl rsa -in certificat.key.lock -out certificat.key

# Saisisses le mot de passe de la cl√©, le fichier d√©verrouill√© est cr√©√©.

# Ta cl√© priv√©e d√©verrouill√©e : certificat.key

# Ta cl√© priv√©e verrouill√©e : certificat.key.lock
# G√©n√©ration du fichier de demande de signature

# Ce fichier va √™tre utile pour obtenir notre certification de l‚Äôorganisme ou pour auto-signer notre certificat.

openssl req -new -key certificat.key.lock -out certificat.csr

# Renseignes les diff√©rents champs demand√©s comme tu veux.

# Ton fichier de demande de signature : certificat.csr
# G√©n√©ration du certificat

# Pour auto-signer ton certificat, ex√©cutes la commande suivante :

openssl x509 -req -days 365 -in certificat.csr -signkey certificat.key.lock -out certificat.crt

# Ton certificat : certificat.crt
# Indiquer √† Apache d‚Äôutiliser le certificat SSL

# Premi√®re chose √† faire, v√©rifier que le ssl est activ√© sur apache :

a2enmod ssl

# Il va falloir ensuite cr√©er un vHost sur le port 443 (port du https) :
nano /etc/apache2/site-availables/site.conf

/etc/apache2/site-availables/site.conf
<VirtualHost *:80>
    ServerName      site.com
    # On redirige le port HTTP vers le port HTTPS
    Redirect        / https://www.site.com
</VirtualHost>
<VirtualHost *:443>
    ServerName      site.com
    DocumentRoot    /var/www/html
        
    SSLEngine on
    SSLCertificateFile    /etc/ssl/www/certificat.crt
    SSLCertificateKeyFile /etc/ssl/www/certificat.key
    # Facultatif, ici, on dit qu'on accepte tout les protocoles SSL sauf SSLv2 et SSLv3 (dont on accepte que le TLS ici)
    SSLProtocol all -SSLv2 -SSLv3
    # Facultatif, on dit que c'est le serveur qui donne l'ordre des algorithmes de chiffrement pendant la n√©gociation avec le client
    SSLHonorCipherOrder on
    # Facultatif, algorithme de chiffrement disponibles (ne pas √™tre trop m√©chant sinon beaucoup de navigateur un peu ancien ne pourront plus se connecter)
    SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES
</VirtualHost>

# On active le vHost :

a2ensite tuto.conf
service apache2 restart

# C‚Äôest tout, ton site est maintenant en HTTPSO
